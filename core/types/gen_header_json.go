// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/gnc-project/galaxynetwork/common"
	"github.com/gnc-project/galaxynetwork/common/hexutil"
)

var _ = (*headerMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (h Header) MarshalJSON() ([]byte, error) {
	type Header struct {
		ParentHash     common.Hash    `json:"parentHash"       gencodec:"required"`
		UncleHash      common.Hash    `json:"sha3Uncles"       gencodec:"required"`
		Coinbase       common.Address `json:"miner"            gencodec:"required"`
		Root           common.Hash    `json:"stateRoot"        gencodec:"required"`
		TxHash         common.Hash    `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash    common.Hash    `json:"receiptsRoot"     gencodec:"required"`
		Bloom          Bloom          `json:"logsBloom"        gencodec:"required"`
		Difficulty     *hexutil.Big   `json:"difficulty"       gencodec:"required"`
		Number         *hexutil.Big   `json:"number"           gencodec:"required"`
		GasLimit       hexutil.Uint64 `json:"gasLimit"         gencodec:"required"`
		GasUsed        hexutil.Uint64 `json:"gasUsed"          gencodec:"required"`
		Time           hexutil.Uint64 `json:"timestamp"        gencodec:"required"`
		Extra          hexutil.Bytes  `json:"extraData"        gencodec:"required"`
		Pid            common.Hash    `json:"pid"              gencodec:"required"`
		K              hexutil.Uint64 `json:"k"                gencodec:"required"`
		Challenge      common.Hash    `json:"challenge"        gencodec:"required"`
		Proof          hexutil.Bytes  `json:"proof"            gencodec:"required"`
		Signed         hexutil.Bytes  `json:"signed"           gencodec:"required"`
		PocTime        hexutil.Uint64 `json:"pocTime"          gencodec:"required"`
		NetCapacity    hexutil.Uint64 `json:"netCapacity"     gencodec:"required"`
		ParentCapacity hexutil.Uint64 `json:"parentCapacity"  gencodec:"required"`
		MixDigest      common.Hash    `json:"mixHash"`
		Nonce          BlockNonce     `json:"nonce"`
		BaseFee        *hexutil.Big   `json:"baseFeePerGas" rlp:"optional"`
		Hash           common.Hash    `json:"hash"`
	}
	var enc Header
	enc.ParentHash = h.ParentHash
	enc.UncleHash = h.UncleHash
	enc.Coinbase = h.Coinbase
	enc.Root = h.Root
	enc.TxHash = h.TxHash
	enc.ReceiptHash = h.ReceiptHash
	enc.Bloom = h.Bloom
	enc.Difficulty = (*hexutil.Big)(h.Difficulty)
	enc.Number = (*hexutil.Big)(h.Number)
	enc.GasLimit = hexutil.Uint64(h.GasLimit)
	enc.GasUsed = hexutil.Uint64(h.GasUsed)
	enc.Time = hexutil.Uint64(h.Time)
	enc.Extra = h.Extra
	enc.Pid = h.Pid
	enc.K = hexutil.Uint64(h.K)
	enc.Challenge = h.Challenge
	enc.Proof = h.Proof
	enc.Signed = h.Signed
	enc.PocTime = hexutil.Uint64(h.PocTime)
	enc.NetCapacity = hexutil.Uint64(h.NetCapacity)
	enc.ParentCapacity = hexutil.Uint64(h.ParentCapacity)
	enc.MixDigest = h.MixDigest
	enc.Nonce = h.Nonce
	enc.BaseFee = (*hexutil.Big)(h.BaseFee)
	enc.Hash = h.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (h *Header) UnmarshalJSON(input []byte) error {
	type Header struct {
		ParentHash     *common.Hash    `json:"parentHash"       gencodec:"required"`
		UncleHash      *common.Hash    `json:"sha3Uncles"       gencodec:"required"`
		Coinbase       *common.Address `json:"miner"            gencodec:"required"`
		Root           *common.Hash    `json:"stateRoot"        gencodec:"required"`
		TxHash         *common.Hash    `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash    *common.Hash    `json:"receiptsRoot"     gencodec:"required"`
		Bloom          *Bloom          `json:"logsBloom"        gencodec:"required"`
		Difficulty     *hexutil.Big    `json:"difficulty"       gencodec:"required"`
		Number         *hexutil.Big    `json:"number"           gencodec:"required"`
		GasLimit       *hexutil.Uint64 `json:"gasLimit"         gencodec:"required"`
		GasUsed        *hexutil.Uint64 `json:"gasUsed"          gencodec:"required"`
		Time           *hexutil.Uint64 `json:"timestamp"        gencodec:"required"`
		Extra          *hexutil.Bytes  `json:"extraData"        gencodec:"required"`
		Pid            *common.Hash    `json:"pid"              gencodec:"required"`
		K              *hexutil.Uint64 `json:"k"                gencodec:"required"`
		Challenge      *common.Hash    `json:"challenge"        gencodec:"required"`
		Proof          *hexutil.Bytes  `json:"proof"            gencodec:"required"`
		Signed         *hexutil.Bytes  `json:"signed"           gencodec:"required"`
		PocTime        *hexutil.Uint64 `json:"pocTime"          gencodec:"required"`
		NetCapacity    *hexutil.Uint64 `json:"netCapacity"     gencodec:"required"`
		ParentCapacity *hexutil.Uint64 `json:"parentCapacity"  gencodec:"required"`
		MixDigest      *common.Hash    `json:"mixHash"`
		Nonce          *BlockNonce     `json:"nonce"`
		BaseFee        *hexutil.Big    `json:"baseFeePerGas" rlp:"optional"`
	}
	var dec Header
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for Header")
	}
	h.ParentHash = *dec.ParentHash
	if dec.UncleHash == nil {
		return errors.New("missing required field 'sha3Uncles' for Header")
	}
	h.UncleHash = *dec.UncleHash
	if dec.Coinbase == nil {
		return errors.New("missing required field 'miner' for Header")
	}
	h.Coinbase = *dec.Coinbase
	if dec.Root == nil {
		return errors.New("missing required field 'stateRoot' for Header")
	}
	h.Root = *dec.Root
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionsRoot' for Header")
	}
	h.TxHash = *dec.TxHash
	if dec.ReceiptHash == nil {
		return errors.New("missing required field 'receiptsRoot' for Header")
	}
	h.ReceiptHash = *dec.ReceiptHash
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Header")
	}
	h.Bloom = *dec.Bloom
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for Header")
	}
	h.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Number == nil {
		return errors.New("missing required field 'number' for Header")
	}
	h.Number = (*big.Int)(dec.Number)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for Header")
	}
	h.GasLimit = uint64(*dec.GasLimit)
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for Header")
	}
	h.GasUsed = uint64(*dec.GasUsed)
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for Header")
	}
	h.Time = uint64(*dec.Time)
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for Header")
	}
	h.Extra = *dec.Extra
	if dec.Pid == nil {
		return errors.New("missing required field 'pid' for Header")
	}
	h.Pid = *dec.Pid
	if dec.K == nil {
		return errors.New("missing required field 'k' for Header")
	}
	h.K = uint64(*dec.K)
	if dec.Challenge == nil {
		return errors.New("missing required field 'challenge' for Header")
	}
	h.Challenge = *dec.Challenge
	if dec.Proof == nil {
		return errors.New("missing required field 'proof' for Header")
	}
	h.Proof = *dec.Proof
	if dec.Signed == nil {
		return errors.New("missing required field 'signed' for Header")
	}
	h.Signed = *dec.Signed
	if dec.PocTime == nil {
		return errors.New("missing required field 'pocTime' for Header")
	}
	h.PocTime = uint64(*dec.PocTime)
	if dec.NetCapacity == nil {
		return errors.New("missing required field 'netCapacity' for Header")
	}
	h.NetCapacity = uint64(*dec.NetCapacity)
	if dec.ParentCapacity == nil {
		return errors.New("missing required field 'parentCapacity' for Header")
	}
	h.ParentCapacity = uint64(*dec.ParentCapacity)
	if dec.MixDigest != nil {
		h.MixDigest = *dec.MixDigest
	}
	if dec.Nonce != nil {
		h.Nonce = *dec.Nonce
	}
	if dec.BaseFee != nil {
		h.BaseFee = (*big.Int)(dec.BaseFee)
	}
	return nil
}
