package main

import (
	"encoding/json"
	"fmt"
	"github.com/gnc-project/galaxynetwork/common"
	"github.com/gnc-project/galaxynetwork/core"
	"github.com/gnc-project/galaxynetwork/rlp"
	"math/big"
	"os"
	"sort"
	"strconv"
	"strings"
)
type allocItem struct{ Addr, Balance *big.Int }

type allocList []allocItem

func (a allocList) Len() int           { return len(a) }
func (a allocList) Less(i, j int) bool { return a[i].Addr.Cmp(a[j].Addr) < 0 }
func (a allocList) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }

func makelist(g *core.Genesis) allocList {
	a := make(allocList, 0, len(g.Alloc))
	for addr, account := range g.Alloc {
		if len(account.Storage) > 0 || len(account.Code) > 0 || account.Nonce != 0 {
			panic(fmt.Sprintf("can't encode account %x", addr))
		}
		bigAddr := new(big.Int).SetBytes(addr.Bytes())
		a = append(a, allocItem{bigAddr, account.Balance})
	}
	sort.Sort(a)
	return a
}

func makealloc(g *core.Genesis) string {
	a := makelist(g)
	data, err := rlp.EncodeToBytes(a)
	if err != nil {
		panic(err)
	}
	return strconv.QuoteToASCII(string(data))
}
type genesisAccount struct {
	Code       []byte                      `json:"code,omitempty"`
	Storage    map[common.Hash]common.Hash `json:"storage,omitempty"`
	Balance    *big.Int                    `json:"balance" gencodec:"required"`
	Nonce      uint64                      `json:"nonce,omitempty"`
	PrivateKey []byte                      `json:"secretKey,omitempty"` // for tests
}
type genesisAlloc map[common.Address]genesisAccount

func decodePrealloc(data string) genesisAlloc {
	var p []struct{ Addr, Balance *big.Int }
	if err := rlp.NewStream(strings.NewReader(data), 0).Decode(&p); err != nil {
		panic(err)
	}
	ga := make(genesisAlloc, len(p))
	for _, account := range p {
		ga[common.BigToAddress(account.Addr)] = genesisAccount{Balance: account.Balance}
	}
	return ga
}

func deco()  {
	var mainnetAllocData = "\xf9\x05\xb0\u0794\fCe\xf0~\xeb\"\xef\xb12\xd2b8\xc9uN\x13\xb0\u015d\x88\r\xe0\xffv\x1a\xf9\x00\x00\u0794\f\xc2\xea\xf6\xeey`\xc4\xe4+-\xc7*\x86iq\x9c\x16O?\x88\r\u0129T\xe4>\x80\x00\u0754#\x19K\x89}\x80\xec\x1a\xff\xfb\xa3E\x83\xafd\xca\x05\x13\xeb\x02\x87\x02^R\xe0|h\x00\u07d4+\xa5\x0fKF90\xfd\xbb|dxx\xf3\xad\xa5\xfa\x1b6\xbf\x89\x05k\xc7^-c\x10\x00\x00\u07945\u0717\f\xf4r\xa7\x99i\xaf\x13\xfef=\u046b\xaa\u0252\x19\x88\f6cVjX\x00\x00\u07d47\x85U\xa3U\x8b\xad\x1b\xb42\x82\xe5UM\x9c\f\xf5\xca1&\x89\x05k\xc7^-c\x10\x00\x00\xe2\x948\xa2_E\xe2\"~\x03\xf7\xae\x9a\x90s\v\x9fjXa\x132\x8c\x016\xaeq\xd3\u04dc3\u034c\xe0\x00\u07949\u0493\u012e[\x8a\x02\xddlA\xb6\xb7\xfd&<L\xe8\u078e\x88J\x9b0\x9f\x14\x94\x10\x00\u0794B\x0f\u018a\xa1i\xb7\xa7\xf2\x117\xe5\v\xb3I[F=\xea~\x88\r\xd7)\xfa\xe2<\x00\x00\xe1\x94G\x80\x15$Q{\xf1\xf7@\x1c\xcb\xf5H\x83\xf1\xd0\xd3<G\x91\x8b\x02*\x02\xf1\x1a?B\xe8G\xa0\x00\u0794I\v\xd3g{\xa9\x0f\xdcSF\xe6\x18\xba\x925\xd0{\xd7\"j\x88\r\xdbY]a\u01e0\x00\u0794I\x1em\x04\x14\x8f\xc1=\xc3\xdc.\x9d\xb1d\xf7\xef\xc3\xecO\x1d\x88\x98\xa7@\xec\xa4\xf9\x80\x00\xe0\x94K*P\xd7\x0f3w\xc8\x18\xa3t\xde+gd\x8e\x8a\xa2\to\x8a\n\x97\xf8\x0eA\xaa\xe9\xf6\x80\x00\u07d4O\x9d\x9f\xc35[;1>\x13\xd9\xee\xe2\xb3?\xfb\xb8\xea\xd3T\x89\x02\xb5\xe3\xaf\x16\xb1\x88\x00\x00\u07d4`\x8d^a\xa2c\v\xfcbvHA\xb6y\x15\xfa\x06\x84\xa1\u0209\x04\x9b\x93\x1c\xed\xcf\f\x00\x00\xe0\x94g@n\xbc\x99t\x17\xa2E\x1f\x06m\x89\x16\xf2^\x82\f\x16\x92\x8a\x16rE\x81\xf3\xee.@\x00\x00\u07d4q\xa3(,\xe2\x00\"\ta\xd7\xfa*\x06\xa5J1\u01d1it\x89f\xbahk\xdc\x15<\x00\x00\u07d4u\x16\x856|4\xe8\xa8\xf6\x91\x90\u0267s_\vc\xf6{\xae\x895\xf0f\x1cC\x99\xac\x00\x00\u0794\x81\xcaW\x84\xe78\x90{\x8dCO\xa31\xd9\xff\xa0+\x85f\x19\x88+3\u03d5\u0706$\x00\xe0\x94\x82\xbf\x17\x92\xec\xf9\xa3:3\xb7\xd2m\x84\xd48\xb3\x13n\xadJ\x8a\x0f\b`(\x0e\xdc4x\x00\x00\u07d4\x83\u06e7E<\xa2\xeb\x0e\xdf\x12o7\xf9\xb9J\x91\xc4\u0435\u007f\x89\x8ed\x17bio\xc9\x00\x00\u0794\x84lQ\xe4\xa4\xceq,:\xee\u052d(\x03\xf2I,\xe2\u49c8\x01;\xd6\x11\xe4|\\\x00\u07d4\x86\x05m!\x0e\xa7\xbc#3z\u02be\x96\xde'^XJg\u0389\x04\x927\xe0\xd1\u0673\xd8\x00\u0794\x8b\xff>\x8ajA=6=\x9a\xa6\xa5\u0742\u177bg\xaf\x17\x88\b\xc7\x0eM\xcd\xfc\xa0\x00\u0794\x97\u007fZV \x86)\xbe\xd7O\x8d\xc9\xc18\xf2mU\xdd\u023a\x88Ec\x91\x82D\xf4\x00\x00\xe0\x94\x9b\xe4>\xa88\xc4Q\xca{\xab\xbaG\xfb\x8f\xbe\x85\xecPj\xb3\x8aHe\xd2O2\xa1\x9f\xf7\x10\x00\u07d4\x9cy0\xee3\xcf_\x14\xecX\xf7\xaas\xf4eB>\x02\xabw\x89\x14\xa8.\xccN\xba~\xc0\x00\u0794\x9c\xd0\xc4\x10\xc1\xb3f\x96_\xb8\x03-\x1f\u009f%XM%\x9e\x88@v\xc6dZ\xb3\xb0\x00\u07d4\xa0\x86\xffpu\x91\xf0\xb3\xa0Q\xaa1\xa3\x19\x8at\xd2-\x9cO\x89\x05k\xc7^-c\x10\x00\x00\u0794\xa1\x8b6hH\xe1H\\\xae\xee\xa4N\x95\xd1\xe7\x1bg\xb5\x8a\xfa\x88\x0fk\x10\x9d\x19u\x80\x00\u07d4\xa6\x18B\xe7\f\xc4\u0694p\xf0m\xf8\x04\xa6\xe5\xb4\"V\xfbl\x89\x85\x15\xf8\x14\xda?\xfc\x00\x00\u0754\xac1\x97P(p\xbcd\x98*\x13\x1a\xfc\xde\x01O\xac\x9a\x9c\x98\x87\x03 Z\xf7g\x00\x00\u0794\xac\xd6qU\u05a8\u021f9\x8e\x93\x83\u007f\xd0=J\x0f\x0f\xbb\xa6\x88\b$`\x8a\xa1\xb8\xc0\x00\u0794\xb0u\xeex\xbe\x9f|\x9e\xed.\x04\xffW\x0e\x93\xf0h\x0f\x10\xa8\x88|\xe4/U\x94N\xa0\x00\u07d4\xb7\x1e\x97\xa3\u1a5b\x92t\x13\xda$@f\x8dm\xff\xde\xe3\xe8\x89\x1b\x1a\xe7\x13\xde=\x85`\x00\u0794\xb9\xc3t\x97;\xc6\x00!#\xb6`\xfeI\xc6\x17\x80\xa7\xa8\xa53\x88\r\u05dc\x93\x8by\xe0\x00\u0794\xb9\xed\xddx\x9eJ\xac\x137j\u034bz\xcc3\xb2\u07cbN\xbd\x88\x01[\u03c8\x03\x82\xc0\x00\u0794\xbc\x86\x04\xd7_\x8c\xc2\x1e\xed=<\x8e\u00f04\x97\xb2V\x00\x92\x88\t%\u0387\x12%\x80\x00\u0794\xbf6#S\xe7\x10\x97s\xd3\u007f\xf3\xc37\u007f\xe9-\xa9\x9a\xad\x14\x88\r\xd9\xff\xc1\xbc\xc3\xe0\x00\xe1\x94\u0244\x10\xf4\xd6\x17\xdeQU\x13KM\xaaX\"\x1c'7{\u078b\a^\v\x0e\xb1\t\xaf\xdb\xe4\xb0\x00\u0794\xd3!\xa6\x88YK\xc8\a@\x89v7r\xef\xfeZ\"&\xfdD\x88\x01[\u03c8\x03\x82\xc0\x00\u0754\u06ae\x8bg\xc535z\xb4\"\x92;)\x06\xa4\x1e\xf4}'\xf4\x87\"U[W\x1c\x00\x00\xe0\x94\xe1\xf0\xe8\xdaMp\x1cb\xdc=\x13\x18\x97z\xe6\x9e\xd6H\x17g\x8a\x01RE2)>\x92I`\x00\u07d4\xe5q\xd3@\\\xa3\xd4O\xa3\xeb\u015bv(_]\x8b\xea\xe8a\x89\x05k\xc7^-c\x10\x00\x00\u0794\xeb\xa1H\xce\x18\xdc|.e\xcd\xef_vh\x9b)\xfa\xe9.\u0248Eb\xf8\xb6\xb8\xa1\x80\x00\u0794\xf3:V\x92\xc0A\x8e\u007f\x18cT\\9<G\xdaq\x91Mo\x88\r\u0464\xa0\x10@\xe0\x00"
	//				 al := "\xf9\x05\xb0\u0794\fCe\xf0~\xeb\"\xef\xb12\xd2b8\xc9uN\x13\xb0\u015d\x88\r\xe0\xffv\x1a\xf9\x00\x00\u0794\f\xc2\xea\xf6\xeey`\xc4\xe4+-\xc7*\x86iq\x9c\x16O?\x88\r\u0129T\xe4>\x80\x00\u0754#\x19K\x89}\x80\xec\x1a\xff\xfb\xa3E\x83\xafd\xca\x05\x13\xeb\x02\x87\x02^R\xe0|h\x00\u07d4+\xa5\x0fKF90\xfd\xbb|dxx\xf3\xad\xa5\xfa\x1b6\xbf\x89\x05k\xc7^-c\x10\x00\x00\u07945\u0717\f\xf4r\xa7\x99i\xaf\x13\xfef=\u046b\xaa\u0252\x19\x88\f6cVjX\x00\x00\u07d47\x85U\xa3U\x8b\xad\x1b\xb42\x82\xe5UM\x9c\f\xf5\xca1&\x89\x05k\xc7^-c\x10\x00\x00\xe2\x948\xa2_E\xe2\"~\x03\xf7\xae\x9a\x90s\v\x9fjXa\x132\x8c\x016\xaeq\xd3\u04dc3\u034c\xe0\x00\u07949\u0493\u012e[\x8a\x02\xddlA\xb6\xb7\xfd&<L\xe8\u078e\x88J\x9b0\x9f\x14\x94\x10\x00\u0794B\x0f\u018a\xa1i\xb7\xa7\xf2\x117\xe5\v\xb3I[F=\xea~\x88\r\xd7)\xfa\xe2<\x00\x00\xe1\x94G\x80\x15$Q{\xf1\xf7@\x1c\xcb\xf5H\x83\xf1\xd0\xd3<G\x91\x8b\x02*\x02\xf1\x1a?B\xe8G\xa0\x00\u0794I\v\xd3g{\xa9\x0f\xdcSF\xe6\x18\xba\x925\xd0{\xd7\"j\x88\r\xdbY]a\u01e0\x00\u0794I\x1em\x04\x14\x8f\xc1=\xc3\xdc.\x9d\xb1d\xf7\xef\xc3\xecO\x1d\x88\x98\xa7@\xec\xa4\xf9\x80\x00\xe0\x94K*P\xd7\x0f3w\xc8\x18\xa3t\xde+gd\x8e\x8a\xa2\to\x8a\n\x97\xf8\x0eA\xaa\xe9\xf6\x80\x00\u07d4O\x9d\x9f\xc35[;1>\x13\xd9\xee\xe2\xb3?\xfb\xb8\xea\xd3T\x89\x02\xb5\xe3\xaf\x16\xb1\x88\x00\x00\u07d4`\x8d^a\xa2c\v\xfcbvHA\xb6y\x15\xfa\x06\x84\xa1\u0209\x04\x9b\x93\x1c\xed\xcf\f\x00\x00\xe0\x94g@n\xbc\x99t\x17\xa2E\x1f\x06m\x89\x16\xf2^\x82\f\x16\x92\x8a\x16rE\x81\xf3\xee.@\x00\x00\u07d4q\xa3(,\xe2\x00\"\ta\xd7\xfa*\x06\xa5J1\u01d1it\x89f\xbahk\xdc\x15<\x00\x00\u07d4u\x16\x856|4\xe8\xa8\xf6\x91\x90\u0267s_\vc\xf6{\xae\x895\xf0f\x1cC\x99\xac\x00\x00\u0794\x81\xcaW\x84\xe78\x90{\x8dCO\xa31\xd9\xff\xa0+\x85f\x19\x88+3\u03d5\u0706$\x00\xe0\x94\x82\xbf\x17\x92\xec\xf9\xa3:3\xb7\xd2m\x84\xd48\xb3\x13n\xadJ\x8a\x0f\b`(\x0e\xdc4x\x00\x00\u07d4\x83\u06e7E<\xa2\xeb\x0e\xdf\x12o7\xf9\xb9J\x91\xc4\u0435\u007f\x89\x8ed\x17bio\xc9\x00\x00\u0794\x84lQ\xe4\xa4\xceq,:\xee\u052d(\x03\xf2I,\xe2\u49c8\x01;\xd6\x11\xe4|\\\x00\u07d4\x86\x05m!\x0e\xa7\xbc#3z\u02be\x96\xde'^XJg\u0389\x04\x927\xe0\xd1\u0673\xd8\x00\u0794\x8b\xff>\x8ajA=6=\x9a\xa6\xa5\u0742\u177bg\xaf\x17\x88\b\xc7\x0eM\xcd\xfc\xa0\x00\u0794\x97\u007fZV \x86)\xbe\xd7O\x8d\xc9\xc18\xf2mU\xdd\u023a\x88Ec\x91\x82D\xf4\x00\x00\xe0\x94\x9b\xe4>\xa88\xc4Q\xca{\xab\xbaG\xfb\x8f\xbe\x85\xecPj\xb3\x8aHe\xd2O2\xa1\x9f\xf7\x10\x00\u07d4\x9cy0\xee3\xcf_\x14\xecX\xf7\xaas\xf4eB>\x02\xabw\x89\x14\xa8.\xccN\xba~\xc0\x00\u0794\x9c\xd0\xc4\x10\xc1\xb3f\x96_\xb8\x03-\x1f\u009f%XM%\x9e\x88@v\xc6dZ\xb3\xb0\x00\u07d4\xa0\x86\xffpu\x91\xf0\xb3\xa0Q\xaa1\xa3\x19\x8at\xd2-\x9cO\x89\x05k\xc7^-c\x10\x00\x00\u0794\xa1\x8b6hH\xe1H\\\xae\xee\xa4N\x95\xd1\xe7\x1bg\xb5\x8a\xfa\x88\x0fk\x10\x9d\x19u\x80\x00\u07d4\xa6\x18B\xe7\f\xc4\u0694p\xf0m\xf8\x04\xa6\xe5\xb4\"V\xfbl\x89\x85\x15\xf8\x14\xda?\xfc\x00\x00\u0754\xac1\x97P(p\xbcd\x98*\x13\x1a\xfc\xde\x01O\xac\x9a\x9c\x98\x87\x03 Z\xf7g\x00\x00\u0794\xac\xd6qU\u05a8\u021f9\x8e\x93\x83\u007f\xd0=J\x0f\x0f\xbb\xa6\x88\b$`\x8a\xa1\xb8\xc0\x00\u0794\xb0u\xeex\xbe\x9f|\x9e\xed.\x04\xffW\x0e\x93\xf0h\x0f\x10\xa8\x88|\xe4/U\x94N\xa0\x00\u07d4\xb7\x1e\x97\xa3\u1a5b\x92t\x13\xda$@f\x8dm\xff\xde\xe3\xe8\x89\x1b\x1a\xe7\x13\xde=\x85`\x00\u0794\xb9\xc3t\x97;\xc6\x00!#\xb6`\xfeI\xc6\x17\x80\xa7\xa8\xa53\x88\r\u05dc\x93\x8by\xe0\x00\u0794\xb9\xed\xddx\x9eJ\xac\x137j\u034bz\xcc3\xb2\u07cbN\xbd\x88\x01[\u03c8\x03\x82\xc0\x00\u0794\xbc\x86\x04\xd7_\x8c\xc2\x1e\xed=<\x8e\u00f04\x97\xb2V\x00\x92\x88\t%\u0387\x12%\x80\x00\u0794\xbf6#S\xe7\x10\x97s\xd3\u007f\xf3\xc37\u007f\xe9-\xa9\x9a\xad\x14\x88\r\xd9\xff\xc1\xbc\xc3\xe0\x00\xe1\x94\u0244\x10\xf4\xd6\x17\xdeQU\x13KM\xaaX\"\x1c'7{\u078b\a^\v\x0e\xb1\t\xaf\xdb\xe4\xb0\x00\u0794\xd3!\xa6\x88YK\xc8\a@\x89v7r\xef\xfeZ\"&\xfdD\x88\x01[\u03c8\x03\x82\xc0\x00\u0754\u06ae\x8bg\xc535z\xb4\"\x92;)\x06\xa4\x1e\xf4}'\xf4\x87\"U[W\x1c\x00\x00\xe0\x94\xe1\xf0\xe8\xdaMp\x1cb\xdc=\x13\x18\x97z\xe6\x9e\xd6H\x17g\x8a\x01RE2)>\x92I`\x00\u07d4\xe5q\xd3@\\\xa3\xd4O\xa3\xeb\u015bv(_]\x8b\xea\xe8a\x89\x05k\xc7^-c\x10\x00\x00\u0794\xeb\xa1H\xce\x18\xdc|.e\xcd\xef_vh\x9b)\xfa\xe9.\u0248Eb\xf8\xb6\xb8\xa1\x80\x00\u0794\xf3:V\x92\xc0A\x8e\u007f\x18cT\\9<G\xdaq\x91Mo\x88\r\u0464\xa0\x10@\xe0\x00"
	ges := decodePrealloc(mainnetAllocData)
	total := big.NewInt(0)
	for k,v := range ges {
		fmt.Println(k.Hex(),v.Balance)
		total.Add(total,v.Balance)
	}
	fmt.Println(total.Div(total,big.NewInt(0).SetUint64(1e18)))
}

func main()  {
	g := new(core.Genesis)
	file, err := os.Open("/code/gnc-project/galaxynetwork/rewardc/alloc/genesis_alloc.json")
	if err != nil {
		panic(err)
	}
	if err := json.NewDecoder(file).Decode(g); err != nil {
		panic(err)
	}
	alloc := makealloc(g)
	fmt.Println("const allocData =", alloc)
	file.Close()
	//
	//f, err := os.OpenFile("/code/gnc-project/galaxynetwork/core/genesis_alloc.go",os.O_RDWR, os.ModePerm)
	//delBytes := make([]byte, 127)
	//n,err := f.WriteAt(delBytes,24)
	//fmt.Println(n,err)
}

//const mainnetAllocData = "\xf8D\xe1\x94F\x16\x18\xdcD\x80$n\xba\xab\xb4\x81i\xbcS^\x03\xe9\xf8n\x8bR\xb7\xd2\xdc\xc8\f\xd2\xe4\x00\x00\x00\xe1\x94Q?\xc3k0\xcd9\xe4\xf2\x87\xb5c?\x8c]\x0f\xa6~\bL\x8bR\xb7\xd2\xdc\xc8\f\xd2\xe4\x00\x00\x00"